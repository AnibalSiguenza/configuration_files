priority -50

extends cpp

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

snippet main "main() (main)"
#include <stdio.h>
#include <iostream>

int main(int argc, char *argv[]){
	${VISUAL}$0
	return 0;
}
endsnippet

snippet mainmpi "main() (main)"
#include <mpi.h>
#include <stdio.h>
#include <iostream>

int main(int argc, char *argv[]){
	int np, rank;

	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &np);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);

	${VISUAL}$0

	MPI_Finalize();
	return 0;
}
endsnippet

snippet cltest "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
	std::string _name;
	public:
	${1/(\w+).*/$1/} (std::string name){
		_name = name;
		std::cout << "Creating " << _name << std::endl;
	}
	virtual ~${1/(\w+).*/$1/} (){
		std::cout << "Destroying " << _name << std::endl;
	}
	${1/(\w+).*/$1/}(const ${1/(\w+).*/$1/} & x){                                                                           
		_name = x._name;                                                                              
		std::cout<< "Copy constructing " << _name << std::endl;                                       
	}                                                                                                 
	const ${1/(\w+).*/$1/} & operator=(const ${1/(\w+).*/$1/} & x){                                                         
		_name = x._name;                                                                              
		std::cout<< "Assign " << _name << std::endl;                                                  
		return *this;                                                                                 
	}                                                                                                 
	const ${1/(\w+).*/$1/} & operator=(const ${1/(\w+).*/$1/} && x){                                                        
		_name = x._name;                                                                              
		std::cout<< "Move Assign " << _name << std::endl;                                             
		return *this;                                                                                 
	}                                                                                                 
	${1/(\w+).*/$1/}(const ${1/(\w+).*/$1/} && x){                                                                          
		_name = x._name;                                                                              
		std::cout<< "Move Constructor " << _name << std::endl;                                        
	} 
	void hello(){
		std::cout << _name << " says hi! ;)" << std::endl;
	}
};
endsnippet
